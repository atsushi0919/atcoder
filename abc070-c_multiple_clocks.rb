# C - Multiple Clocks

INPUT1 = <<~"EOS"
  2
  2
  3
EOS
OUTPUT1 = <<~"EOS"
  6
EOS

# 2 つの時計があり、各時計の針が真っ直ぐ上に向くのは以下の時刻です。
# 1 番目の時計の針: 時計の針を動かし始めてから、2 秒後、4 秒後、6 秒後、...
# 2 番目の時計の針: 時計の針を動かし始めてから、3 秒後、6 秒後、9 秒後、...
# したがって、2 つの時計の針が真っ直ぐ上に向くのにかかる秒数は 6 秒となります。

INPUT2 = <<~"EOS"
  5
  2
  5
  10
  1000000000000000000
  1000000000000000000
EOS
OUTPUT2 = <<~"EOS"
  1000000000000000000
EOS

def solve(input_lines)
  _, *t = input_lines.split.map(&:to_i)
  t.inject(:lcm)
end

puts solve(STDIN.read)

# 最大公約数
# puts numbers.inject(:gcd) # => 5
# 最小公倍数
# puts numbers.inject(:lcm) # => 60
=begin
C - Multiple Clocks  / 
実行時間制限: 2 sec / メモリ制限: 256 MB

配点 : 300 点

問題文
N 台の時計があり、i(1≦i≦N) 番目の時計の針はちょうど Ti 秒で時計盤を 1 周します。
最初、全ての時計の針は真っ直ぐ上に向いており、止まっています。
イルカは、全ての時計の針を同時に動かし始めました。
再び、全ての時計の針が真っ直ぐ上に向くのは何秒後でしょうか?

制約
1≦N≦100
1≦T 
i
​
 ≦10 
18
 
入力は全て整数である。
答えは 10 
18
  秒以内である。
入力
入力は以下の形式で標準入力から与えられる。

N
T 
1
​
 
:  
T 
N
​
 
出力
時計の針を動かし始めてから、再び全ての時計の針が真っ直ぐ上に向くまでの秒数を出力せよ。

入力例 1 
Copy
2
2
3
出力例 1 
Copy
6
2 つの時計があり、各時計の針が真っ直ぐ上に向くのは以下の時刻です。

1 番目の時計の針: 時計の針を動かし始めてから、2 秒後、4 秒後、6 秒後、...
2 番目の時計の針: 時計の針を動かし始めてから、3 秒後、6 秒後、9 秒後、...
したがって、2 つの時計の針が真っ直ぐ上に向くのにかかる秒数は 6 秒となります。

入力例 2 
Copy
5
2
5
10
1000000000000000000
1000000000000000000
出力例 2 
Copy
1000000000000000000
=end
